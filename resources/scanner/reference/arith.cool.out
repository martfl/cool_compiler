#name resources/scanner/input/arith.cool
#7 Klass "class"
#7 TypeId "A"
#7 Lbrace "{"
#9 ObjectId "var"
#9 Colon ":"
#9 TypeId "Int"
#9 Assign "<-"
#9 IntConst "0"
#9 Semi ";"
#11 ObjectId "value"
#11 Lparen "("
#11 Rparen ")"
#11 Colon ":"
#11 TypeId "Int"
#11 Lbrace "{"
#11 ObjectId "var"
#11 Rbrace "}"
#11 Semi ";"
#13 ObjectId "set_var"
#13 Lparen "("
#13 ObjectId "num"
#13 Colon ":"
#13 TypeId "Int"
#13 Rparen ")"
#13 Colon ":"
#13 TypeId "SELF_TYPE"
#13 Lbrace "{"
#14 Lbrace "{"
#15 ObjectId "var"
#15 Assign "<-"
#15 ObjectId "num"
#15 Semi ";"
#16 ObjectId "self"
#16 Semi ";"
#17 Rbrace "}"
#18 Rbrace "}"
#18 Semi ";"
#20 ObjectId "method1"
#20 Lparen "("
#20 ObjectId "num"
#20 Colon ":"
#20 TypeId "Int"
#20 Rparen ")"
#20 Colon ":"
#20 TypeId "SELF_TYPE"
#20 Lbrace "{"
#21 ObjectId "self"
#22 Rbrace "}"
#22 Semi ";"
#24 ObjectId "method2"
#24 Lparen "("
#24 ObjectId "num1"
#24 Colon ":"
#24 TypeId "Int"
#24 Comma ","
#24 ObjectId "num2"
#24 Colon ":"
#24 TypeId "Int"
#24 Rparen ")"
#24 Colon ":"
#24 TypeId "B"
#24 Lbrace "{"
#25 Lparen "("
#25 Let "let"
#25 ObjectId "x"
#25 Colon ":"
#25 TypeId "Int"
#25 In "in"
#26 Lbrace "{"
#27 ObjectId "x"
#27 Assign "<-"
#27 ObjectId "num1"
#27 Plus "+"
#27 ObjectId "num2"
#27 Semi ";"
#28 Lparen "("
#28 New "new"
#28 TypeId "B"
#28 Rparen ")"
#28 Dot "."
#28 ObjectId "set_var"
#28 Lparen "("
#28 ObjectId "x"
#28 Rparen ")"
#28 Semi ";"
#29 Rbrace "}"
#30 Rparen ")"
#31 Rbrace "}"
#31 Semi ";"
#33 ObjectId "method3"
#33 Lparen "("
#33 ObjectId "num"
#33 Colon ":"
#33 TypeId "Int"
#33 Rparen ")"
#33 Colon ":"
#33 TypeId "C"
#33 Lbrace "{"
#34 Lparen "("
#34 Let "let"
#34 ObjectId "x"
#34 Colon ":"
#34 TypeId "Int"
#34 In "in"
#35 Lbrace "{"
#36 ObjectId "x"
#36 Assign "<-"
#36 Neg "~"
#36 ObjectId "num"
#36 Semi ";"
#37 Lparen "("
#37 New "new"
#37 TypeId "C"
#37 Rparen ")"
#37 Dot "."
#37 ObjectId "set_var"
#37 Lparen "("
#37 ObjectId "x"
#37 Rparen ")"
#37 Semi ";"
#38 Rbrace "}"
#39 Rparen ")"
#40 Rbrace "}"
#40 Semi ";"
#42 ObjectId "method4"
#42 Lparen "("
#42 ObjectId "num1"
#42 Colon ":"
#42 TypeId "Int"
#42 Comma ","
#42 ObjectId "num2"
#42 Colon ":"
#42 TypeId "Int"
#42 Rparen ")"
#42 Colon ":"
#42 TypeId "D"
#42 Lbrace "{"
#43 If "if"
#43 ObjectId "num2"
#43 Lt "<"
#43 ObjectId "num1"
#43 Then "then"
#44 Lparen "("
#44 Let "let"
#44 ObjectId "x"
#44 Colon ":"
#44 TypeId "Int"
#44 In "in"
#45 Lbrace "{"
#46 ObjectId "x"
#46 Assign "<-"
#46 ObjectId "num1"
#46 Minus "-"
#46 ObjectId "num2"
#46 Semi ";"
#47 Lparen "("
#47 New "new"
#47 TypeId "D"
#47 Rparen ")"
#47 Dot "."
#47 ObjectId "set_var"
#47 Lparen "("
#47 ObjectId "x"
#47 Rparen ")"
#47 Semi ";"
#48 Rbrace "}"
#49 Rparen ")"
#50 Else "else"
#51 Lparen "("
#51 Let "let"
#51 ObjectId "x"
#51 Colon ":"
#51 TypeId "Int"
#51 In "in"
#52 Lbrace "{"
#53 ObjectId "x"
#53 Assign "<-"
#53 ObjectId "num2"
#53 Minus "-"
#53 ObjectId "num1"
#53 Semi ";"
#54 Lparen "("
#54 New "new"
#54 TypeId "D"
#54 Rparen ")"
#54 Dot "."
#54 ObjectId "set_var"
#54 Lparen "("
#54 ObjectId "x"
#54 Rparen ")"
#54 Semi ";"
#55 Rbrace "}"
#56 Rparen ")"
#57 Fi "fi"
#58 Rbrace "}"
#58 Semi ";"
#60 ObjectId "method5"
#60 Lparen "("
#60 ObjectId "num"
#60 Colon ":"
#60 TypeId "Int"
#60 Rparen ")"
#60 Colon ":"
#60 TypeId "E"
#60 Lbrace "{"
#61 Lparen "("
#61 Let "let"
#61 ObjectId "x"
#61 Colon ":"
#61 TypeId "Int"
#61 Assign "<-"
#61 IntConst "1"
#61 In "in"
#62 Lbrace "{"
#63 Lparen "("
#63 Let "let"
#63 ObjectId "y"
#63 Colon ":"
#63 TypeId "Int"
#63 Assign "<-"
#63 IntConst "1"
#63 In "in"
#64 While "while"
#64 ObjectId "y"
#64 Le "<="
#64 ObjectId "num"
#64 Loop "loop"
#65 Lbrace "{"
#66 ObjectId "x"
#66 Assign "<-"
#66 ObjectId "x"
#66 Mult "*"
#66 ObjectId "y"
#66 Semi ";"
#67 ObjectId "y"
#67 Assign "<-"
#67 ObjectId "y"
#67 Plus "+"
#67 IntConst "1"
#67 Semi ";"
#68 Rbrace "}"
#69 Pool "pool"
#70 Rparen ")"
#70 Semi ";"
#71 Lparen "("
#71 New "new"
#71 TypeId "E"
#71 Rparen ")"
#71 Dot "."
#71 ObjectId "set_var"
#71 Lparen "("
#71 ObjectId "x"
#71 Rparen ")"
#71 Semi ";"
#72 Rbrace "}"
#73 Rparen ")"
#74 Rbrace "}"
#74 Semi ";"
#76 Rbrace "}"
#76 Semi ";"
#78 Klass "class"
#78 TypeId "B"
#78 Inherits "inherits"
#78 TypeId "A"
#78 Lbrace "{"
#80 ObjectId "method5"
#80 Lparen "("
#80 ObjectId "num"
#80 Colon ":"
#80 TypeId "Int"
#80 Rparen ")"
#80 Colon ":"
#80 TypeId "E"
#80 Lbrace "{"
#81 Lparen "("
#81 Let "let"
#81 ObjectId "x"
#81 Colon ":"
#81 TypeId "Int"
#81 In "in"
#82 Lbrace "{"
#83 ObjectId "x"
#83 Assign "<-"
#83 ObjectId "num"
#83 Mult "*"
#83 ObjectId "num"
#83 Semi ";"
#84 Lparen "("
#84 New "new"
#84 TypeId "E"
#84 Rparen ")"
#84 Dot "."
#84 ObjectId "set_var"
#84 Lparen "("
#84 ObjectId "x"
#84 Rparen ")"
#84 Semi ";"
#85 Rbrace "}"
#86 Rparen ")"
#87 Rbrace "}"
#87 Semi ";"
#89 Rbrace "}"
#89 Semi ";"
#91 Klass "class"
#91 TypeId "C"
#91 Inherits "inherits"
#91 TypeId "B"
#91 Lbrace "{"
#93 ObjectId "method6"
#93 Lparen "("
#93 ObjectId "num"
#93 Colon ":"
#93 TypeId "Int"
#93 Rparen ")"
#93 Colon ":"
#93 TypeId "A"
#93 Lbrace "{"
#94 Lparen "("
#94 Let "let"
#94 ObjectId "x"
#94 Colon ":"
#94 TypeId "Int"
#94 In "in"
#95 Lbrace "{"
#96 ObjectId "x"
#96 Assign "<-"
#96 Neg "~"
#96 ObjectId "num"
#96 Semi ";"
#97 Lparen "("
#97 New "new"
#97 TypeId "A"
#97 Rparen ")"
#97 Dot "."
#97 ObjectId "set_var"
#97 Lparen "("
#97 ObjectId "x"
#97 Rparen ")"
#97 Semi ";"
#98 Rbrace "}"
#99 Rparen ")"
#100 Rbrace "}"
#100 Semi ";"
#102 ObjectId "method5"
#102 Lparen "("
#102 ObjectId "num"
#102 Colon ":"
#102 TypeId "Int"
#102 Rparen ")"
#102 Colon ":"
#102 TypeId "E"
#102 Lbrace "{"
#103 Lparen "("
#103 Let "let"
#103 ObjectId "x"
#103 Colon ":"
#103 TypeId "Int"
#103 In "in"
#104 Lbrace "{"
#105 ObjectId "x"
#105 Assign "<-"
#105 ObjectId "num"
#105 Mult "*"
#105 ObjectId "num"
#105 Mult "*"
#105 ObjectId "num"
#105 Semi ";"
#106 Lparen "("
#106 New "new"
#106 TypeId "E"
#106 Rparen ")"
#106 Dot "."
#106 ObjectId "set_var"
#106 Lparen "("
#106 ObjectId "x"
#106 Rparen ")"
#106 Semi ";"
#107 Rbrace "}"
#108 Rparen ")"
#109 Rbrace "}"
#109 Semi ";"
#111 Rbrace "}"
#111 Semi ";"
#113 Klass "class"
#113 TypeId "D"
#113 Inherits "inherits"
#113 TypeId "B"
#113 Lbrace "{"
#115 ObjectId "method7"
#115 Lparen "("
#115 ObjectId "num"
#115 Colon ":"
#115 TypeId "Int"
#115 Rparen ")"
#115 Colon ":"
#115 TypeId "Bool"
#115 Lbrace "{"
#116 Lparen "("
#116 Let "let"
#116 ObjectId "x"
#116 Colon ":"
#116 TypeId "Int"
#116 Assign "<-"
#116 ObjectId "num"
#116 In "in"
#117 If "if"
#117 ObjectId "x"
#117 Lt "<"
#117 IntConst "0"
#117 Then "then"
#117 ObjectId "method7"
#117 Lparen "("
#117 Neg "~"
#117 ObjectId "x"
#117 Rparen ")"
#117 Else "else"
#118 If "if"
#118 IntConst "0"
#118 Eq "="
#118 ObjectId "x"
#118 Then "then"
#118 BoolConst "true"
#118 Else "else"
#119 If "if"
#119 IntConst "1"
#119 Eq "="
#119 ObjectId "x"
#119 Then "then"
#119 BoolConst "false"
#119 Else "else"
#120 If "if"
#120 IntConst "2"
#120 Eq "="
#120 ObjectId "x"
#120 Then "then"
#120 BoolConst "false"
#120 Else "else"
#121 ObjectId "method7"
#121 Lparen "("
#121 ObjectId "x"
#121 Minus "-"
#121 IntConst "3"
#121 Rparen ")"
#122 Fi "fi"
#122 Fi "fi"
#122 Fi "fi"
#122 Fi "fi"
#123 Rparen ")"
#124 Rbrace "}"
#124 Semi ";"
#126 Rbrace "}"
#126 Semi ";"
#128 Klass "class"
#128 TypeId "E"
#128 Inherits "inherits"
#128 TypeId "D"
#128 Lbrace "{"
#130 ObjectId "method6"
#130 Lparen "("
#130 ObjectId "num"
#130 Colon ":"
#130 TypeId "Int"
#130 Rparen ")"
#130 Colon ":"
#130 TypeId "A"
#130 Lbrace "{"
#131 Lparen "("
#131 Let "let"
#131 ObjectId "x"
#131 Colon ":"
#131 TypeId "Int"
#131 In "in"
#132 Lbrace "{"
#133 ObjectId "x"
#133 Assign "<-"
#133 ObjectId "num"
#133 Div "/"
#133 IntConst "8"
#133 Semi ";"
#134 Lparen "("
#134 New "new"
#134 TypeId "A"
#134 Rparen ")"
#134 Dot "."
#134 ObjectId "set_var"
#134 Lparen "("
#134 ObjectId "x"
#134 Rparen ")"
#134 Semi ";"
#135 Rbrace "}"
#136 Rparen ")"
#137 Rbrace "}"
#137 Semi ";"
#139 Rbrace "}"
#139 Semi ";"
#155 Klass "class"
#155 TypeId "A2I"
#155 Lbrace "{"
#157 ObjectId "c2i"
#157 Lparen "("
#157 ObjectId "char"
#157 Colon ":"
#157 TypeId "String"
#157 Rparen ")"
#157 Colon ":"
#157 TypeId "Int"
#157 Lbrace "{"
#158 If "if"
#158 ObjectId "char"
#158 Eq "="
#158 StrConst "0"
#158 Then "then"
#158 IntConst "0"
#158 Else "else"
#159 If "if"
#159 ObjectId "char"
#159 Eq "="
#159 StrConst "1"
#159 Then "then"
#159 IntConst "1"
#159 Else "else"
#160 If "if"
#160 ObjectId "char"
#160 Eq "="
#160 StrConst "2"
#160 Then "then"
#160 IntConst "2"
#160 Else "else"
#161 If "if"
#161 ObjectId "char"
#161 Eq "="
#161 StrConst "3"
#161 Then "then"
#161 IntConst "3"
#161 Else "else"
#162 If "if"
#162 ObjectId "char"
#162 Eq "="
#162 StrConst "4"
#162 Then "then"
#162 IntConst "4"
#162 Else "else"
#163 If "if"
#163 ObjectId "char"
#163 Eq "="
#163 StrConst "5"
#163 Then "then"
#163 IntConst "5"
#163 Else "else"
#164 If "if"
#164 ObjectId "char"
#164 Eq "="
#164 StrConst "6"
#164 Then "then"
#164 IntConst "6"
#164 Else "else"
#165 If "if"
#165 ObjectId "char"
#165 Eq "="
#165 StrConst "7"
#165 Then "then"
#165 IntConst "7"
#165 Else "else"
#166 If "if"
#166 ObjectId "char"
#166 Eq "="
#166 StrConst "8"
#166 Then "then"
#166 IntConst "8"
#166 Else "else"
#167 If "if"
#167 ObjectId "char"
#167 Eq "="
#167 StrConst "9"
#167 Then "then"
#167 IntConst "9"
#167 Else "else"
#168 Lbrace "{"
#168 ObjectId "abort"
#168 Lparen "("
#168 Rparen ")"
#168 Semi ";"
#168 IntConst "0"
#168 Semi ";"
#168 Rbrace "}"
#170 Fi "fi"
#170 Fi "fi"
#170 Fi "fi"
#170 Fi "fi"
#170 Fi "fi"
#170 Fi "fi"
#170 Fi "fi"
#170 Fi "fi"
#170 Fi "fi"
#170 Fi "fi"
#171 Rbrace "}"
#171 Semi ";"
#176 ObjectId "i2c"
#176 Lparen "("
#176 ObjectId "i"
#176 Colon ":"
#176 TypeId "Int"
#176 Rparen ")"
#176 Colon ":"
#176 TypeId "String"
#176 Lbrace "{"
#177 If "if"
#177 ObjectId "i"
#177 Eq "="
#177 IntConst "0"
#177 Then "then"
#177 StrConst "0"
#177 Else "else"
#178 If "if"
#178 ObjectId "i"
#178 Eq "="
#178 IntConst "1"
#178 Then "then"
#178 StrConst "1"
#178 Else "else"
#179 If "if"
#179 ObjectId "i"
#179 Eq "="
#179 IntConst "2"
#179 Then "then"
#179 StrConst "2"
#179 Else "else"
#180 If "if"
#180 ObjectId "i"
#180 Eq "="
#180 IntConst "3"
#180 Then "then"
#180 StrConst "3"
#180 Else "else"
#181 If "if"
#181 ObjectId "i"
#181 Eq "="
#181 IntConst "4"
#181 Then "then"
#181 StrConst "4"
#181 Else "else"
#182 If "if"
#182 ObjectId "i"
#182 Eq "="
#182 IntConst "5"
#182 Then "then"
#182 StrConst "5"
#182 Else "else"
#183 If "if"
#183 ObjectId "i"
#183 Eq "="
#183 IntConst "6"
#183 Then "then"
#183 StrConst "6"
#183 Else "else"
#184 If "if"
#184 ObjectId "i"
#184 Eq "="
#184 IntConst "7"
#184 Then "then"
#184 StrConst "7"
#184 Else "else"
#185 If "if"
#185 ObjectId "i"
#185 Eq "="
#185 IntConst "8"
#185 Then "then"
#185 StrConst "8"
#185 Else "else"
#186 If "if"
#186 ObjectId "i"
#186 Eq "="
#186 IntConst "9"
#186 Then "then"
#186 StrConst "9"
#186 Else "else"
#187 Lbrace "{"
#187 ObjectId "abort"
#187 Lparen "("
#187 Rparen ")"
#187 Semi ";"
#187 StrConst ""
#187 Semi ";"
#187 Rbrace "}"
#188 Fi "fi"
#188 Fi "fi"
#188 Fi "fi"
#188 Fi "fi"
#188 Fi "fi"
#188 Fi "fi"
#188 Fi "fi"
#188 Fi "fi"
#188 Fi "fi"
#188 Fi "fi"
#189 Rbrace "}"
#189 Semi ";"
#199 ObjectId "a2i"
#199 Lparen "("
#199 ObjectId "s"
#199 Colon ":"
#199 TypeId "String"
#199 Rparen ")"
#199 Colon ":"
#199 TypeId "Int"
#199 Lbrace "{"
#200 If "if"
#200 ObjectId "s"
#200 Dot "."
#200 ObjectId "length"
#200 Lparen "("
#200 Rparen ")"
#200 Eq "="
#200 IntConst "0"
#200 Then "then"
#200 IntConst "0"
#200 Else "else"
#201 If "if"
#201 ObjectId "s"
#201 Dot "."
#201 ObjectId "substr"
#201 Lparen "("
#201 IntConst "0"
#201 Comma ","
#201 IntConst "1"
#201 Rparen ")"
#201 Eq "="
#201 StrConst "-"
#201 Then "then"
#201 Neg "~"
#201 ObjectId "a2i_aux"
#201 Lparen "("
#201 ObjectId "s"
#201 Dot "."
#201 ObjectId "substr"
#201 Lparen "("
#201 IntConst "1"
#201 Comma ","
#201 ObjectId "s"
#201 Dot "."
#201 ObjectId "length"
#201 Lparen "("
#201 Rparen ")"
#201 Minus "-"
#201 IntConst "1"
#201 Rparen ")"
#201 Rparen ")"
#201 Else "else"
#202 If "if"
#202 ObjectId "s"
#202 Dot "."
#202 ObjectId "substr"
#202 Lparen "("
#202 IntConst "0"
#202 Comma ","
#202 IntConst "1"
#202 Rparen ")"
#202 Eq "="
#202 StrConst "+"
#202 Then "then"
#202 ObjectId "a2i_aux"
#202 Lparen "("
#202 ObjectId "s"
#202 Dot "."
#202 ObjectId "substr"
#202 Lparen "("
#202 IntConst "1"
#202 Comma ","
#202 ObjectId "s"
#202 Dot "."
#202 ObjectId "length"
#202 Lparen "("
#202 Rparen ")"
#202 Minus "-"
#202 IntConst "1"
#202 Rparen ")"
#202 Rparen ")"
#202 Else "else"
#203 ObjectId "a2i_aux"
#203 Lparen "("
#203 ObjectId "s"
#203 Rparen ")"
#204 Fi "fi"
#204 Fi "fi"
#204 Fi "fi"
#205 Rbrace "}"
#205 Semi ";"
#211 ObjectId "a2i_aux"
#211 Lparen "("
#211 ObjectId "s"
#211 Colon ":"
#211 TypeId "String"
#211 Rparen ")"
#211 Colon ":"
#211 TypeId "Int"
#211 Lbrace "{"
#212 Lparen "("
#212 Let "let"
#212 ObjectId "int"
#212 Colon ":"
#212 TypeId "Int"
#212 Assign "<-"
#212 IntConst "0"
#212 In "in"
#213 Lbrace "{"
#214 Lparen "("
#214 Let "let"
#214 ObjectId "j"
#214 Colon ":"
#214 TypeId "Int"
#214 Assign "<-"
#214 ObjectId "s"
#214 Dot "."
#214 ObjectId "length"
#214 Lparen "("
#214 Rparen ")"
#214 In "in"
#215 Lparen "("
#215 Let "let"
#215 ObjectId "i"
#215 Colon ":"
#215 TypeId "Int"
#215 Assign "<-"
#215 IntConst "0"
#215 In "in"
#216 While "while"
#216 ObjectId "i"
#216 Lt "<"
#216 ObjectId "j"
#216 Loop "loop"
#217 Lbrace "{"
#218 ObjectId "int"
#218 Assign "<-"
#218 ObjectId "int"
#218 Mult "*"
#218 IntConst "10"
#218 Plus "+"
#218 ObjectId "c2i"
#218 Lparen "("
#218 ObjectId "s"
#218 Dot "."
#218 ObjectId "substr"
#218 Lparen "("
#218 ObjectId "i"
#218 Comma ","
#218 IntConst "1"
#218 Rparen ")"
#218 Rparen ")"
#218 Semi ";"
#219 ObjectId "i"
#219 Assign "<-"
#219 ObjectId "i"
#219 Plus "+"
#219 IntConst "1"
#219 Semi ";"
#220 Rbrace "}"
#221 Pool "pool"
#222 Rparen ")"
#223 Rparen ")"
#223 Semi ";"
#224 ObjectId "int"
#224 Semi ";"
#225 Rbrace "}"
#226 Rparen ")"
#227 Rbrace "}"
#227 Semi ";"
#232 ObjectId "i2a"
#232 Lparen "("
#232 ObjectId "i"
#232 Colon ":"
#232 TypeId "Int"
#232 Rparen ")"
#232 Colon ":"
#232 TypeId "String"
#232 Lbrace "{"
#233 If "if"
#233 ObjectId "i"
#233 Eq "="
#233 IntConst "0"
#233 Then "then"
#233 StrConst "0"
#233 Else "else"
#234 If "if"
#234 IntConst "0"
#234 Lt "<"
#234 ObjectId "i"
#234 Then "then"
#234 ObjectId "i2a_aux"
#234 Lparen "("
#234 ObjectId "i"
#234 Rparen ")"
#234 Else "else"
#235 StrConst "-"
#235 Dot "."
#235 ObjectId "concat"
#235 Lparen "("
#235 ObjectId "i2a_aux"
#235 Lparen "("
#235 ObjectId "i"
#235 Mult "*"
#235 Neg "~"
#235 IntConst "1"
#235 Rparen ")"
#235 Rparen ")"
#236 Fi "fi"
#236 Fi "fi"
#237 Rbrace "}"
#237 Semi ";"
#241 ObjectId "i2a_aux"
#241 Lparen "("
#241 ObjectId "i"
#241 Colon ":"
#241 TypeId "Int"
#241 Rparen ")"
#241 Colon ":"
#241 TypeId "String"
#241 Lbrace "{"
#242 If "if"
#242 ObjectId "i"
#242 Eq "="
#242 IntConst "0"
#242 Then "then"
#242 StrConst ""
#242 Else "else"
#243 Lparen "("
#243 Let "let"
#243 ObjectId "next"
#243 Colon ":"
#243 TypeId "Int"
#243 Assign "<-"
#243 ObjectId "i"
#243 Div "/"
#243 IntConst "10"
#243 In "in"
#244 ObjectId "i2a_aux"
#244 Lparen "("
#244 ObjectId "next"
#244 Rparen ")"
#244 Dot "."
#244 ObjectId "concat"
#244 Lparen "("
#244 ObjectId "i2c"
#244 Lparen "("
#244 ObjectId "i"
#244 Minus "-"
#244 ObjectId "next"
#244 Mult "*"
#244 IntConst "10"
#244 Rparen ")"
#244 Rparen ")"
#245 Rparen ")"
#246 Fi "fi"
#247 Rbrace "}"
#247 Semi ";"
#249 Rbrace "}"
#249 Semi ";"
#251 Klass "class"
#251 TypeId "Main"
#251 Inherits "inherits"
#251 TypeId "IO"
#251 Lbrace "{"
#253 ObjectId "char"
#253 Colon ":"
#253 TypeId "String"
#253 Semi ";"
#254 ObjectId "avar"
#254 Colon ":"
#254 TypeId "A"
#254 Semi ";"
#255 ObjectId "a_var"
#255 Colon ":"
#255 TypeId "A"
#255 Semi ";"
#256 ObjectId "flag"
#256 Colon ":"
#256 TypeId "Bool"
#256 Assign "<-"
#256 BoolConst "true"
#256 Semi ";"
#259 ObjectId "menu"
#259 Lparen "("
#259 Rparen ")"
#259 Colon ":"
#259 TypeId "String"
#259 Lbrace "{"
#260 Lbrace "{"
#261 ObjectId "out_string"
#261 Lparen "("
#261 StrConst "\n\tTo add a number to "
#261 Rparen ")"
#261 Semi ";"
#262 ObjectId "print"
#262 Lparen "("
#262 ObjectId "avar"
#262 Rparen ")"
#262 Semi ";"
#263 ObjectId "out_string"
#263 Lparen "("
#263 StrConst "...enter a:\n"
#263 Rparen ")"
#263 Semi ";"
#264 ObjectId "out_string"
#264 Lparen "("
#264 StrConst "\tTo negate "
#264 Rparen ")"
#264 Semi ";"
#265 ObjectId "print"
#265 Lparen "("
#265 ObjectId "avar"
#265 Rparen ")"
#265 Semi ";"
#266 ObjectId "out_string"
#266 Lparen "("
#266 StrConst "...enter b:\n"
#266 Rparen ")"
#266 Semi ";"
#267 ObjectId "out_string"
#267 Lparen "("
#267 StrConst "\tTo find the difference between "
#267 Rparen ")"
#267 Semi ";"
#268 ObjectId "print"
#268 Lparen "("
#268 ObjectId "avar"
#268 Rparen ")"
#268 Semi ";"
#269 ObjectId "out_string"
#269 Lparen "("
#269 StrConst "and another number...enter c:\n"
#269 Rparen ")"
#269 Semi ";"
#270 ObjectId "out_string"
#270 Lparen "("
#270 StrConst "\tTo find the factorial of "
#270 Rparen ")"
#270 Semi ";"
#271 ObjectId "print"
#271 Lparen "("
#271 ObjectId "avar"
#271 Rparen ")"
#271 Semi ";"
#272 ObjectId "out_string"
#272 Lparen "("
#272 StrConst "...enter d:\n"
#272 Rparen ")"
#272 Semi ";"
#273 ObjectId "out_string"
#273 Lparen "("
#273 StrConst "\tTo square "
#273 Rparen ")"
#273 Semi ";"
#274 ObjectId "print"
#274 Lparen "("
#274 ObjectId "avar"
#274 Rparen ")"
#274 Semi ";"
#275 ObjectId "out_string"
#275 Lparen "("
#275 StrConst "...enter e:\n"
#275 Rparen ")"
#275 Semi ";"
#276 ObjectId "out_string"
#276 Lparen "("
#276 StrConst "\tTo cube "
#276 Rparen ")"
#276 Semi ";"
#277 ObjectId "print"
#277 Lparen "("
#277 ObjectId "avar"
#277 Rparen ")"
#277 Semi ";"
#278 ObjectId "out_string"
#278 Lparen "("
#278 StrConst "...enter f:\n"
#278 Rparen ")"
#278 Semi ";"
#279 ObjectId "out_string"
#279 Lparen "("
#279 StrConst "\tTo find out if "
#279 Rparen ")"
#279 Semi ";"
#280 ObjectId "print"
#280 Lparen "("
#280 ObjectId "avar"
#280 Rparen ")"
#280 Semi ";"
#281 ObjectId "out_string"
#281 Lparen "("
#281 StrConst "is a multiple of 3...enter g:\n"
#281 Rparen ")"
#281 Semi ";"
#282 ObjectId "out_string"
#282 Lparen "("
#282 StrConst "\tTo divide "
#282 Rparen ")"
#282 Semi ";"
#283 ObjectId "print"
#283 Lparen "("
#283 ObjectId "avar"
#283 Rparen ")"
#283 Semi ";"
#284 ObjectId "out_string"
#284 Lparen "("
#284 StrConst "by 8...enter h:\n"
#284 Rparen ")"
#284 Semi ";"
#285 ObjectId "out_string"
#285 Lparen "("
#285 StrConst "\tTo get a new number...enter j:\n"
#285 Rparen ")"
#285 Semi ";"
#286 ObjectId "out_string"
#286 Lparen "("
#286 StrConst "\tTo quit...enter q:\n\n"
#286 Rparen ")"
#286 Semi ";"
#287 ObjectId "in_string"
#287 Lparen "("
#287 Rparen ")"
#287 Semi ";"
#288 Rbrace "}"
#289 Rbrace "}"
#289 Semi ";"
#291 ObjectId "prompt"
#291 Lparen "("
#291 Rparen ")"
#291 Colon ":"
#291 TypeId "String"
#291 Lbrace "{"
#292 Lbrace "{"
#293 ObjectId "out_string"
#293 Lparen "("
#293 StrConst "\n"
#293 Rparen ")"
#293 Semi ";"
#294 ObjectId "out_string"
#294 Lparen "("
#294 StrConst "Please enter a number...  "
#294 Rparen ")"
#294 Semi ";"
#295 ObjectId "in_string"
#295 Lparen "("
#295 Rparen ")"
#295 Semi ";"
#296 Rbrace "}"
#297 Rbrace "}"
#297 Semi ";"
#299 ObjectId "get_int"
#299 Lparen "("
#299 Rparen ")"
#299 Colon ":"
#299 TypeId "Int"
#299 Lbrace "{"
#300 Lbrace "{"
#301 Lparen "("
#301 Let "let"
#301 ObjectId "z"
#301 Colon ":"
#301 TypeId "A2I"
#301 Assign "<-"
#301 New "new"
#301 TypeId "A2I"
#301 In "in"
#302 Lparen "("
#302 Let "let"
#302 ObjectId "s"
#302 Colon ":"
#302 TypeId "String"
#302 Assign "<-"
#302 ObjectId "prompt"
#302 Lparen "("
#302 Rparen ")"
#302 In "in"
#303 ObjectId "z"
#303 Dot "."
#303 ObjectId "a2i"
#303 Lparen "("
#303 ObjectId "s"
#303 Rparen ")"
#304 Rparen ")"
#305 Rparen ")"
#305 Semi ";"
#306 Rbrace "}"
#307 Rbrace "}"
#307 Semi ";"
#309 ObjectId "is_even"
#309 Lparen "("
#309 ObjectId "num"
#309 Colon ":"
#309 TypeId "Int"
#309 Rparen ")"
#309 Colon ":"
#309 TypeId "Bool"
#309 Lbrace "{"
#310 Lparen "("
#310 Let "let"
#310 ObjectId "x"
#310 Colon ":"
#310 TypeId "Int"
#310 Assign "<-"
#310 ObjectId "num"
#310 In "in"
#311 If "if"
#311 ObjectId "x"
#311 Lt "<"
#311 IntConst "0"
#311 Then "then"
#311 ObjectId "is_even"
#311 Lparen "("
#311 Neg "~"
#311 ObjectId "x"
#311 Rparen ")"
#311 Else "else"
#312 If "if"
#312 IntConst "0"
#312 Eq "="
#312 ObjectId "x"
#312 Then "then"
#312 BoolConst "true"
#312 Else "else"
#313 If "if"
#313 IntConst "1"
#313 Eq "="
#313 ObjectId "x"
#313 Then "then"
#313 BoolConst "false"
#313 Else "else"
#314 ObjectId "is_even"
#314 Lparen "("
#314 ObjectId "x"
#314 Minus "-"
#314 IntConst "2"
#314 Rparen ")"
#315 Fi "fi"
#315 Fi "fi"
#315 Fi "fi"
#316 Rparen ")"
#317 Rbrace "}"
#317 Semi ";"
#319 ObjectId "class_type"
#319 Lparen "("
#319 ObjectId "var"
#319 Colon ":"
#319 TypeId "A"
#319 Rparen ")"
#319 Colon ":"
#319 TypeId "SELF_TYPE"
#319 Lbrace "{"
#320 Case "case"
#320 ObjectId "var"
#320 Of "of"
#321 ObjectId "a"
#321 Colon ":"
#321 TypeId "A"
#321 Darrow "=>"
#321 ObjectId "out_string"
#321 Lparen "("
#321 StrConst "Class type is now A\n"
#321 Rparen ")"
#321 Semi ";"
#322 ObjectId "b"
#322 Colon ":"
#322 TypeId "B"
#322 Darrow "=>"
#322 ObjectId "out_string"
#322 Lparen "("
#322 StrConst "Class type is now B\n"
#322 Rparen ")"
#322 Semi ";"
#323 ObjectId "c"
#323 Colon ":"
#323 TypeId "C"
#323 Darrow "=>"
#323 ObjectId "out_string"
#323 Lparen "("
#323 StrConst "Class type is now C\n"
#323 Rparen ")"
#323 Semi ";"
#324 ObjectId "d"
#324 Colon ":"
#324 TypeId "D"
#324 Darrow "=>"
#324 ObjectId "out_string"
#324 Lparen "("
#324 StrConst "Class type is now D\n"
#324 Rparen ")"
#324 Semi ";"
#325 ObjectId "e"
#325 Colon ":"
#325 TypeId "E"
#325 Darrow "=>"
#325 ObjectId "out_string"
#325 Lparen "("
#325 StrConst "Class type is now E\n"
#325 Rparen ")"
#325 Semi ";"
#326 ObjectId "o"
#326 Colon ":"
#326 TypeId "Object"
#326 Darrow "=>"
#326 ObjectId "out_string"
#326 Lparen "("
#326 StrConst "Oooops\n"
#326 Rparen ")"
#326 Semi ";"
#327 Esac "esac"
#328 Rbrace "}"
#328 Semi ";"
#330 ObjectId "print"
#330 Lparen "("
#330 ObjectId "var"
#330 Colon ":"
#330 TypeId "A"
#330 Rparen ")"
#330 Colon ":"
#330 TypeId "SELF_TYPE"
#330 Lbrace "{"
#331 Lparen "("
#331 Let "let"
#331 ObjectId "z"
#331 Colon ":"
#331 TypeId "A2I"
#331 Assign "<-"
#331 New "new"
#331 TypeId "A2I"
#331 In "in"
#332 Lbrace "{"
#333 ObjectId "out_string"
#333 Lparen "("
#333 ObjectId "z"
#333 Dot "."
#333 ObjectId "i2a"
#333 Lparen "("
#333 ObjectId "var"
#333 Dot "."
#333 ObjectId "value"
#333 Lparen "("
#333 Rparen ")"
#333 Rparen ")"
#333 Rparen ")"
#333 Semi ";"
#334 ObjectId "out_string"
#334 Lparen "("
#334 StrConst " "
#334 Rparen ")"
#334 Semi ";"
#335 Rbrace "}"
#336 Rparen ")"
#337 Rbrace "}"
#337 Semi ";"
#339 ObjectId "main"
#339 Lparen "("
#339 Rparen ")"
#339 Colon ":"
#339 TypeId "Object"
#339 Lbrace "{"
#340 Lbrace "{"
#341 ObjectId "avar"
#341 Assign "<-"
#341 Lparen "("
#341 New "new"
#341 TypeId "A"
#341 Rparen ")"
#341 Semi ";"
#342 While "while"
#342 ObjectId "flag"
#342 Loop "loop"
#343 Lbrace "{"
#345 ObjectId "out_string"
#345 Lparen "("
#345 StrConst "number "
#345 Rparen ")"
#345 Semi ";"
#346 ObjectId "print"
#346 Lparen "("
#346 ObjectId "avar"
#346 Rparen ")"
#346 Semi ";"
#347 If "if"
#347 ObjectId "is_even"
#347 Lparen "("
#347 ObjectId "avar"
#347 Dot "."
#347 ObjectId "value"
#347 Lparen "("
#347 Rparen ")"
#347 Rparen ")"
#347 Then "then"
#348 ObjectId "out_string"
#348 Lparen "("
#348 StrConst "is even!\n"
#348 Rparen ")"
#349 Else "else"
#350 ObjectId "out_string"
#350 Lparen "("
#350 StrConst "is odd!\n"
#350 Rparen ")"
#351 Fi "fi"
#351 Semi ";"
#353 ObjectId "class_type"
#353 Lparen "("
#353 ObjectId "avar"
#353 Rparen ")"
#353 Semi ";"
#354 ObjectId "char"
#354 Assign "<-"
#354 ObjectId "menu"
#354 Lparen "("
#354 Rparen ")"
#354 Semi ";"
#355 If "if"
#355 ObjectId "char"
#355 Eq "="
#355 StrConst "a"
#355 Then "then"
#356 Lbrace "{"
#357 ObjectId "a_var"
#357 Assign "<-"
#357 Lparen "("
#357 New "new"
#357 TypeId "A"
#357 Rparen ")"
#357 Dot "."
#357 ObjectId "set_var"
#357 Lparen "("
#357 ObjectId "get_int"
#357 Lparen "("
#357 Rparen ")"
#357 Rparen ")"
#357 Semi ";"
#358 ObjectId "avar"
#358 Assign "<-"
#358 Lparen "("
#358 New "new"
#358 TypeId "B"
#358 Rparen ")"
#358 Dot "."
#358 ObjectId "method2"
#358 Lparen "("
#358 ObjectId "avar"
#358 Dot "."
#358 ObjectId "value"
#358 Lparen "("
#358 Rparen ")"
#358 Comma ","
#358 ObjectId "a_var"
#358 Dot "."
#358 ObjectId "value"
#358 Lparen "("
#358 Rparen ")"
#358 Rparen ")"
#358 Semi ";"
#359 Rbrace "}"
#359 Else "else"
#360 If "if"
#360 ObjectId "char"
#360 Eq "="
#360 StrConst "b"
#360 Then "then"
#361 Case "case"
#361 ObjectId "avar"
#361 Of "of"
#362 ObjectId "c"
#362 Colon ":"
#362 TypeId "C"
#362 Darrow "=>"
#362 ObjectId "avar"
#362 Assign "<-"
#362 ObjectId "c"
#362 Dot "."
#362 ObjectId "method6"
#362 Lparen "("
#362 ObjectId "c"
#362 Dot "."
#362 ObjectId "value"
#362 Lparen "("
#362 Rparen ")"
#362 Rparen ")"
#362 Semi ";"
#363 ObjectId "a"
#363 Colon ":"
#363 TypeId "A"
#363 Darrow "=>"
#363 ObjectId "avar"
#363 Assign "<-"
#363 ObjectId "a"
#363 Dot "."
#363 ObjectId "method3"
#363 Lparen "("
#363 ObjectId "a"
#363 Dot "."
#363 ObjectId "value"
#363 Lparen "("
#363 Rparen ")"
#363 Rparen ")"
#363 Semi ";"
#364 ObjectId "o"
#364 Colon ":"
#364 TypeId "Object"
#364 Darrow "=>"
#364 Lbrace "{"
#365 ObjectId "out_string"
#365 Lparen "("
#365 StrConst "Oooops\n"
#365 Rparen ")"
#365 Semi ";"
#366 ObjectId "abort"
#366 Lparen "("
#366 Rparen ")"
#366 Semi ";"
#366 IntConst "0"
#366 Semi ";"
#367 Rbrace "}"
#367 Semi ";"
#368 Esac "esac"
#368 Else "else"
#369 If "if"
#369 ObjectId "char"
#369 Eq "="
#369 StrConst "c"
#369 Then "then"
#370 Lbrace "{"
#371 ObjectId "a_var"
#371 Assign "<-"
#371 Lparen "("
#371 New "new"
#371 TypeId "A"
#371 Rparen ")"
#371 Dot "."
#371 ObjectId "set_var"
#371 Lparen "("
#371 ObjectId "get_int"
#371 Lparen "("
#371 Rparen ")"
#371 Rparen ")"
#371 Semi ";"
#372 ObjectId "avar"
#372 Assign "<-"
#372 Lparen "("
#372 New "new"
#372 TypeId "D"
#372 Rparen ")"
#372 Dot "."
#372 ObjectId "method4"
#372 Lparen "("
#372 ObjectId "avar"
#372 Dot "."
#372 ObjectId "value"
#372 Lparen "("
#372 Rparen ")"
#372 Comma ","
#372 ObjectId "a_var"
#372 Dot "."
#372 ObjectId "value"
#372 Lparen "("
#372 Rparen ")"
#372 Rparen ")"
#372 Semi ";"
#373 Rbrace "}"
#373 Else "else"
#374 If "if"
#374 ObjectId "char"
#374 Eq "="
#374 StrConst "d"
#374 Then "then"
#374 ObjectId "avar"
#374 Assign "<-"
#374 Lparen "("
#374 New "new"
#374 TypeId "C"
#374 Rparen ")"
#374 At "@"
#374 TypeId "A"
#374 Dot "."
#374 ObjectId "method5"
#374 Lparen "("
#374 ObjectId "avar"
#374 Dot "."
#374 ObjectId "value"
#374 Lparen "("
#374 Rparen ")"
#374 Rparen ")"
#374 Else "else"
#376 If "if"
#376 ObjectId "char"
#376 Eq "="
#376 StrConst "e"
#376 Then "then"
#376 ObjectId "avar"
#376 Assign "<-"
#376 Lparen "("
#376 New "new"
#376 TypeId "C"
#376 Rparen ")"
#376 At "@"
#376 TypeId "B"
#376 Dot "."
#376 ObjectId "method5"
#376 Lparen "("
#376 ObjectId "avar"
#376 Dot "."
#376 ObjectId "value"
#376 Lparen "("
#376 Rparen ")"
#376 Rparen ")"
#376 Else "else"
#378 If "if"
#378 ObjectId "char"
#378 Eq "="
#378 StrConst "f"
#378 Then "then"
#378 ObjectId "avar"
#378 Assign "<-"
#378 Lparen "("
#378 New "new"
#378 TypeId "C"
#378 Rparen ")"
#378 At "@"
#378 TypeId "C"
#378 Dot "."
#378 ObjectId "method5"
#378 Lparen "("
#378 ObjectId "avar"
#378 Dot "."
#378 ObjectId "value"
#378 Lparen "("
#378 Rparen ")"
#378 Rparen ")"
#378 Else "else"
#380 If "if"
#380 ObjectId "char"
#380 Eq "="
#380 StrConst "g"
#380 Then "then"
#381 If "if"
#381 Lparen "("
#381 Lparen "("
#381 New "new"
#381 TypeId "D"
#381 Rparen ")"
#381 Dot "."
#381 ObjectId "method7"
#381 Lparen "("
#381 ObjectId "avar"
#381 Dot "."
#381 ObjectId "value"
#381 Lparen "("
#381 Rparen ")"
#381 Rparen ")"
#381 Rparen ")"
#382 Then "then"
#383 Lbrace "{"
#384 ObjectId "out_string"
#384 Lparen "("
#384 StrConst "number "
#384 Rparen ")"
#384 Semi ";"
#385 ObjectId "print"
#385 Lparen "("
#385 ObjectId "avar"
#385 Rparen ")"
#385 Semi ";"
#386 ObjectId "out_string"
#386 Lparen "("
#386 StrConst "is divisible by 3.\n"
#386 Rparen ")"
#386 Semi ";"
#387 Rbrace "}"
#388 Else "else"
#389 Lbrace "{"
#390 ObjectId "out_string"
#390 Lparen "("
#390 StrConst "number "
#390 Rparen ")"
#390 Semi ";"
#391 ObjectId "print"
#391 Lparen "("
#391 ObjectId "avar"
#391 Rparen ")"
#391 Semi ";"
#392 ObjectId "out_string"
#392 Lparen "("
#392 StrConst "is not divisible by 3.\n"
#392 Rparen ")"
#392 Semi ";"
#393 Rbrace "}"
#394 Fi "fi"
#394 Else "else"
#395 If "if"
#395 ObjectId "char"
#395 Eq "="
#395 StrConst "h"
#395 Then "then"
#396 Lparen "("
#396 Let "let"
#396 ObjectId "x"
#396 Colon ":"
#396 TypeId "A"
#396 In "in"
#397 Lbrace "{"
#398 ObjectId "x"
#398 Assign "<-"
#398 Lparen "("
#398 New "new"
#398 TypeId "E"
#398 Rparen ")"
#398 Dot "."
#398 ObjectId "method6"
#398 Lparen "("
#398 ObjectId "avar"
#398 Dot "."
#398 ObjectId "value"
#398 Lparen "("
#398 Rparen ")"
#398 Rparen ")"
#398 Semi ";"
#399 Lparen "("
#399 Let "let"
#399 ObjectId "r"
#399 Colon ":"
#399 TypeId "Int"
#399 Assign "<-"
#399 Lparen "("
#399 ObjectId "avar"
#399 Dot "."
#399 ObjectId "value"
#399 Lparen "("
#399 Rparen ")"
#399 Minus "-"
#399 Lparen "("
#399 ObjectId "x"
#399 Dot "."
#399 ObjectId "value"
#399 Lparen "("
#399 Rparen ")"
#399 Mult "*"
#399 IntConst "8"
#399 Rparen ")"
#399 Rparen ")"
#399 In "in"
#400 Lbrace "{"
#401 ObjectId "out_string"
#401 Lparen "("
#401 StrConst "number "
#401 Rparen ")"
#401 Semi ";"
#402 ObjectId "print"
#402 Lparen "("
#402 ObjectId "avar"
#402 Rparen ")"
#402 Semi ";"
#403 ObjectId "out_string"
#403 Lparen "("
#403 StrConst "is equal to "
#403 Rparen ")"
#403 Semi ";"
#404 ObjectId "print"
#404 Lparen "("
#404 ObjectId "x"
#404 Rparen ")"
#404 Semi ";"
#405 ObjectId "out_string"
#405 Lparen "("
#405 StrConst "times 8 with a remainder of "
#405 Rparen ")"
#405 Semi ";"
#406 Lparen "("
#406 Let "let"
#406 ObjectId "a"
#406 Colon ":"
#406 TypeId "A2I"
#406 Assign "<-"
#406 New "new"
#406 TypeId "A2I"
#406 In "in"
#407 Lbrace "{"
#408 ObjectId "out_string"
#408 Lparen "("
#408 ObjectId "a"
#408 Dot "."
#408 ObjectId "i2a"
#408 Lparen "("
#408 ObjectId "r"
#408 Rparen ")"
#408 Rparen ")"
#408 Semi ";"
#409 ObjectId "out_string"
#409 Lparen "("
#409 StrConst "\n"
#409 Rparen ")"
#409 Semi ";"
#410 Rbrace "}"
#411 Rparen ")"
#411 Semi ";"
#412 Rbrace "}"
#413 Rparen ")"
#413 Semi ";"
#414 ObjectId "avar"
#414 Assign "<-"
#414 ObjectId "x"
#414 Semi ";"
#415 Rbrace "}"
#416 Rparen ")"
#417 Else "else"
#418 If "if"
#418 ObjectId "char"
#418 Eq "="
#418 StrConst "j"
#418 Then "then"
#418 ObjectId "avar"
#418 Assign "<-"
#418 Lparen "("
#418 New "new"
#418 TypeId "A"
#418 Rparen ")"
#419 Else "else"
#420 If "if"
#420 ObjectId "char"
#420 Eq "="
#420 StrConst "q"
#420 Then "then"
#420 ObjectId "flag"
#420 Assign "<-"
#420 BoolConst "false"
#421 Else "else"
#422 ObjectId "avar"
#422 Assign "<-"
#422 Lparen "("
#422 New "new"
#422 TypeId "A"
#422 Rparen ")"
#422 Dot "."
#422 ObjectId "method1"
#422 Lparen "("
#422 ObjectId "avar"
#422 Dot "."
#422 ObjectId "value"
#422 Lparen "("
#422 Rparen ")"
#422 Rparen ")"
#423 Fi "fi"
#423 Fi "fi"
#423 Fi "fi"
#423 Fi "fi"
#423 Fi "fi"
#423 Fi "fi"
#423 Fi "fi"
#423 Fi "fi"
#423 Fi "fi"
#423 Fi "fi"
#423 Semi ";"
#424 Rbrace "}"
#425 Pool "pool"
#425 Semi ";"
#426 Rbrace "}"
#427 Rbrace "}"
#427 Semi ";"
#429 Rbrace "}"
#429 Semi ";"
